// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: servicelogs.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createServiceLogs = `-- name: CreateServiceLogs :one
INSERT INTO service_logs (id, public_id, created_at, updated_at, visitor_id, user_id, desk_id, called_at, is_active)
VALUES (
    gen_random_uuid(),
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4,
    NOW(),
    true
)
RETURNING id, created_at, updated_at, visitor_id, user_id, desk_id, called_at, is_active, public_id
`

type CreateServiceLogsParams struct {
	PublicID  string
	VisitorID uuid.UUID
	UserID    uuid.UUID
	DeskID    uuid.UUID
}

func (q *Queries) CreateServiceLogs(ctx context.Context, arg CreateServiceLogsParams) (ServiceLog, error) {
	row := q.db.QueryRowContext(ctx, createServiceLogs,
		arg.PublicID,
		arg.VisitorID,
		arg.UserID,
		arg.DeskID,
	)
	var i ServiceLog
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VisitorID,
		&i.UserID,
		&i.DeskID,
		&i.CalledAt,
		&i.IsActive,
		&i.PublicID,
	)
	return i, err
}

const getActiveServiceLogs = `-- name: GetActiveServiceLogs :many
SELECT id, created_at, updated_at, visitor_id, user_id, desk_id, called_at, is_active, public_id FROM service_logs
WHERE is_active = true
`

func (q *Queries) GetActiveServiceLogs(ctx context.Context) ([]ServiceLog, error) {
	rows, err := q.db.QueryContext(ctx, getActiveServiceLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceLog
	for rows.Next() {
		var i ServiceLog
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VisitorID,
			&i.UserID,
			&i.DeskID,
			&i.CalledAt,
			&i.IsActive,
			&i.PublicID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActiveServiceLogsByUserID = `-- name: GetActiveServiceLogsByUserID :many
SELECT id, created_at, updated_at, visitor_id, user_id, desk_id, called_at, is_active, public_id FROM service_logs
where is_active = true AND user_id = $1
`

func (q *Queries) GetActiveServiceLogsByUserID(ctx context.Context, userID uuid.UUID) ([]ServiceLog, error) {
	rows, err := q.db.QueryContext(ctx, getActiveServiceLogsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceLog
	for rows.Next() {
		var i ServiceLog
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VisitorID,
			&i.UserID,
			&i.DeskID,
			&i.CalledAt,
			&i.IsActive,
			&i.PublicID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServiceLogs = `-- name: GetServiceLogs :many
SELECT id, created_at, updated_at, visitor_id, user_id, desk_id, called_at, is_active, public_id FROM service_logs
`

func (q *Queries) GetServiceLogs(ctx context.Context) ([]ServiceLog, error) {
	rows, err := q.db.QueryContext(ctx, getServiceLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceLog
	for rows.Next() {
		var i ServiceLog
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VisitorID,
			&i.UserID,
			&i.DeskID,
			&i.CalledAt,
			&i.IsActive,
			&i.PublicID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServiceLogsByPublicID = `-- name: GetServiceLogsByPublicID :one
SELECT id, created_at, updated_at, visitor_id, user_id, desk_id, called_at, is_active, public_id FROM service_logs
WHERE public_id = $1
`

func (q *Queries) GetServiceLogsByPublicID(ctx context.Context, publicID string) (ServiceLog, error) {
	row := q.db.QueryRowContext(ctx, getServiceLogsByPublicID, publicID)
	var i ServiceLog
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VisitorID,
		&i.UserID,
		&i.DeskID,
		&i.CalledAt,
		&i.IsActive,
		&i.PublicID,
	)
	return i, err
}
