// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: desks.sql

package database

import (
	"context"
	"database/sql"
)

const createDesks = `-- name: CreateDesks :one
INSERT INTO desks (id, public_id, number, description, is_active)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    TRUE
)
RETURNING id, number, description, is_active, public_id
`

type CreateDesksParams struct {
	PublicID    string
	Number      int32
	Description sql.NullString
}

func (q *Queries) CreateDesks(ctx context.Context, arg CreateDesksParams) (Desk, error) {
	row := q.db.QueryRowContext(ctx, createDesks, arg.PublicID, arg.Number, arg.Description)
	var i Desk
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Description,
		&i.IsActive,
		&i.PublicID,
	)
	return i, err
}

const getActiveDesks = `-- name: GetActiveDesks :many
SELECT id, number, description, is_active, public_id FROM desks
WHERE is_active = TRUE
`

func (q *Queries) GetActiveDesks(ctx context.Context) ([]Desk, error) {
	rows, err := q.db.QueryContext(ctx, getActiveDesks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Desk
	for rows.Next() {
		var i Desk
		if err := rows.Scan(
			&i.ID,
			&i.Number,
			&i.Description,
			&i.IsActive,
			&i.PublicID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDesks = `-- name: GetDesks :many
SELECT id, number, description, is_active, public_id FROM desks
`

func (q *Queries) GetDesks(ctx context.Context) ([]Desk, error) {
	rows, err := q.db.QueryContext(ctx, getDesks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Desk
	for rows.Next() {
		var i Desk
		if err := rows.Scan(
			&i.ID,
			&i.Number,
			&i.Description,
			&i.IsActive,
			&i.PublicID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDesksByPublicID = `-- name: GetDesksByPublicID :one
SELECT id, number, description, is_active, public_id FROM desks
WHERE public_id = $1
`

func (q *Queries) GetDesksByPublicID(ctx context.Context, publicID string) (Desk, error) {
	row := q.db.QueryRowContext(ctx, getDesksByPublicID, publicID)
	var i Desk
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Description,
		&i.IsActive,
		&i.PublicID,
	)
	return i, err
}
