// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token, public_id, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    $1,
    $2,
    NOW(),
    NOW(),
    $3,
    $4,
    NULL
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at, public_id
`

type CreateRefreshTokenParams struct {
	Token     string
	PublicID  string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.Token,
		arg.PublicID,
		arg.UserID,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.PublicID,
	)
	return i, err
}

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at, public_id FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) GetRefreshTokenByToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.PublicID,
	)
	return i, err
}

const getRefreshTokens = `-- name: GetRefreshTokens :many
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at, public_id FROM refresh_tokens
`

func (q *Queries) GetRefreshTokens(ctx context.Context) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, getRefreshTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.Token,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.ExpiresAt,
			&i.RevokedAt,
			&i.PublicID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRefreshTokensByPublicID = `-- name: GetRefreshTokensByPublicID :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at, public_id FROM refresh_tokens
WHERE public_id = $1
`

func (q *Queries) GetRefreshTokensByPublicID(ctx context.Context, publicID string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokensByPublicID, publicID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.PublicID,
	)
	return i, err
}

const getRefreshTokensByUserID = `-- name: GetRefreshTokensByUserID :many
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at, public_id FROM refresh_tokens
WHERE user_id = $1 AND expires_at > NOW() AND revoked_at IS NULL
`

func (q *Queries) GetRefreshTokensByUserID(ctx context.Context, userID uuid.UUID) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, getRefreshTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.Token,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.ExpiresAt,
			&i.RevokedAt,
			&i.PublicID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeRefreshTokenByToken = `-- name: RevokeRefreshTokenByToken :one
UPDATE refresh_tokens
SET revoked_at = NOW(), updated_at = NOW()
WHERE TOKEN = $1
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at, public_id
`

func (q *Queries) RevokeRefreshTokenByToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, revokeRefreshTokenByToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.PublicID,
	)
	return i, err
}

const revokeRefreshTokenByUserID = `-- name: RevokeRefreshTokenByUserID :many
UPDATE refresh_tokens
SET revoked_at = NOW(), updated_at = NOW()
WHERE user_id = $1 AND expires_at > NOW() AND revoked_at IS NULL
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at, public_id
`

func (q *Queries) RevokeRefreshTokenByUserID(ctx context.Context, userID uuid.UUID) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, revokeRefreshTokenByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.Token,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.ExpiresAt,
			&i.RevokedAt,
			&i.PublicID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeRefreshTokens = `-- name: RevokeRefreshTokens :many
UPDATE refresh_tokens
SET revoked_at = NOW(), updated_at = NOW()
WHERE expires_at > NOW() AND revoked_at IS NULL
returning token, created_at, updated_at, user_id, expires_at, revoked_at, public_id
`

func (q *Queries) RevokeRefreshTokens(ctx context.Context) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, revokeRefreshTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.Token,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.ExpiresAt,
			&i.RevokedAt,
			&i.PublicID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
