// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: purposes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createPurpose = `-- name: CreatePurpose :one
INSERT INTO purposes (id, created_at, updated_at, purpose_name, parent_purpose_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, purpose_name, parent_purpose_id
`

type CreatePurposeParams struct {
	PurposeName     string
	ParentPurposeID uuid.NullUUID
}

func (q *Queries) CreatePurpose(ctx context.Context, arg CreatePurposeParams) (Purpose, error) {
	row := q.db.QueryRowContext(ctx, createPurpose, arg.PurposeName, arg.ParentPurposeID)
	var i Purpose
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PurposeName,
		&i.ParentPurposeID,
	)
	return i, err
}

const getPurposes = `-- name: GetPurposes :many
SELECT id, created_at, updated_at, purpose_name, parent_purpose_id FROM purposes
`

func (q *Queries) GetPurposes(ctx context.Context) ([]Purpose, error) {
	rows, err := q.db.QueryContext(ctx, getPurposes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Purpose
	for rows.Next() {
		var i Purpose
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PurposeName,
			&i.ParentPurposeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPurposesByID = `-- name: GetPurposesByID :one
SELECT id, created_at, updated_at, purpose_name, parent_purpose_id FROM purposes
WHERE id = $1
`

func (q *Queries) GetPurposesByID(ctx context.Context, id uuid.UUID) (Purpose, error) {
	row := q.db.QueryRowContext(ctx, getPurposesByID, id)
	var i Purpose
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PurposeName,
		&i.ParentPurposeID,
	)
	return i, err
}

const getPurposesByName = `-- name: GetPurposesByName :one
SELECT id, created_at, updated_at, purpose_name, parent_purpose_id FROM purposes
WHERE purpose_name = $1
`

func (q *Queries) GetPurposesByName(ctx context.Context, purposeName string) (Purpose, error) {
	row := q.db.QueryRowContext(ctx, getPurposesByName, purposeName)
	var i Purpose
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PurposeName,
		&i.ParentPurposeID,
	)
	return i, err
}

const getPurposesByParent = `-- name: GetPurposesByParent :many
SELECT id, created_at, updated_at, purpose_name, parent_purpose_id FROM purposes
WHERE parent_purpose_id = $1
`

func (q *Queries) GetPurposesByParent(ctx context.Context, parentPurposeID uuid.NullUUID) ([]Purpose, error) {
	rows, err := q.db.QueryContext(ctx, getPurposesByParent, parentPurposeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Purpose
	for rows.Next() {
		var i Purpose
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PurposeName,
			&i.ParentPurposeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setPurpose = `-- name: SetPurpose :one
UPDATE purposes
SET purpose_name = $2, parent_purpose_id = $3
WHERE id = $1
RETURNING id, created_at, updated_at, purpose_name, parent_purpose_id
`

type SetPurposeParams struct {
	ID              uuid.UUID
	PurposeName     string
	ParentPurposeID uuid.NullUUID
}

func (q *Queries) SetPurpose(ctx context.Context, arg SetPurposeParams) (Purpose, error) {
	row := q.db.QueryRowContext(ctx, setPurpose, arg.ID, arg.PurposeName, arg.ParentPurposeID)
	var i Purpose
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PurposeName,
		&i.ParentPurposeID,
	)
	return i, err
}

const setPurposeName = `-- name: SetPurposeName :one
UPDATE purposes
SET purpose_name = $2
WHERE id = $1
RETURNING id, created_at, updated_at, purpose_name, parent_purpose_id
`

type SetPurposeNameParams struct {
	ID          uuid.UUID
	PurposeName string
}

func (q *Queries) SetPurposeName(ctx context.Context, arg SetPurposeNameParams) (Purpose, error) {
	row := q.db.QueryRowContext(ctx, setPurposeName, arg.ID, arg.PurposeName)
	var i Purpose
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PurposeName,
		&i.ParentPurposeID,
	)
	return i, err
}

const setPurposeParentID = `-- name: SetPurposeParentID :one
UPDATE purposes
SET parent_purpose_id = $2
WHERE id = $1
RETURNING id, created_at, updated_at, purpose_name, parent_purpose_id
`

type SetPurposeParentIDParams struct {
	ID              uuid.UUID
	ParentPurposeID uuid.NullUUID
}

func (q *Queries) SetPurposeParentID(ctx context.Context, arg SetPurposeParentIDParams) (Purpose, error) {
	row := q.db.QueryRowContext(ctx, setPurposeParentID, arg.ID, arg.ParentPurposeID)
	var i Purpose
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PurposeName,
		&i.ParentPurposeID,
	)
	return i, err
}

const setPurposeParentIDByParentPurposeName = `-- name: SetPurposeParentIDByParentPurposeName :one
UPDATE purposes
SET parent_purpose_id = (SELECT purposes.id FROM purposes WHERE purposes.purpose_name = $2)
WHERE purposes.id = $1
RETURNING id, created_at, updated_at, purpose_name, parent_purpose_id
`

type SetPurposeParentIDByParentPurposeNameParams struct {
	ID          uuid.UUID
	PurposeName string
}

func (q *Queries) SetPurposeParentIDByParentPurposeName(ctx context.Context, arg SetPurposeParentIDByParentPurposeNameParams) (Purpose, error) {
	row := q.db.QueryRowContext(ctx, setPurposeParentIDByParentPurposeName, arg.ID, arg.PurposeName)
	var i Purpose
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PurposeName,
		&i.ParentPurposeID,
	)
	return i, err
}
