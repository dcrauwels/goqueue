// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password, full_name, is_admin, is_active)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    FALSE,
    TRUE
)
RETURNING id, created_at, updated_at, email, hashed_password, is_admin, is_active, desk_id, full_name
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
	FullName       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword, arg.FullName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsAdmin,
		&i.IsActive,
		&i.DeskID,
		&i.FullName,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :one
DELETE FROM users
WHERE id = $1
RETURNING id, created_at, updated_at, email, hashed_password, is_admin, is_active, desk_id, full_name
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsAdmin,
		&i.IsActive,
		&i.DeskID,
		&i.FullName,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, hashed_password, is_admin, is_active, desk_id, full_name FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsAdmin,
		&i.IsActive,
		&i.DeskID,
		&i.FullName,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, email, hashed_password, is_admin, is_active, desk_id, full_name FROM users
where id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsAdmin,
		&i.IsActive,
		&i.DeskID,
		&i.FullName,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, created_at, updated_at, email, hashed_password, is_admin, is_active, desk_id, full_name FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.HashedPassword,
			&i.IsAdmin,
			&i.IsActive,
			&i.DeskID,
			&i.FullName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserByID = `-- name: SetUserByID :one
UPDATE users
SET email = $2, full_name = $3, is_admin = $4, is_active = $5, updated_at = NOW()
WHERE id = $1
returning id, created_at, updated_at, email, hashed_password, is_admin, is_active, desk_id, full_name
`

type SetUserByIDParams struct {
	ID       uuid.UUID
	Email    string
	FullName string
	IsAdmin  bool
	IsActive bool
}

func (q *Queries) SetUserByID(ctx context.Context, arg SetUserByIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, setUserByID,
		arg.ID,
		arg.Email,
		arg.FullName,
		arg.IsAdmin,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsAdmin,
		&i.IsActive,
		&i.DeskID,
		&i.FullName,
	)
	return i, err
}

const setUserEmailPasswordByID = `-- name: SetUserEmailPasswordByID :one
UPDATE users
SET email = $2, hashed_password = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, email, hashed_password, is_admin, is_active, desk_id, full_name
`

type SetUserEmailPasswordByIDParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
}

func (q *Queries) SetUserEmailPasswordByID(ctx context.Context, arg SetUserEmailPasswordByIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, setUserEmailPasswordByID, arg.ID, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsAdmin,
		&i.IsActive,
		&i.DeskID,
		&i.FullName,
	)
	return i, err
}

const setUserFullNameByID = `-- name: SetUserFullNameByID :one
UPDATE users
SET full_name = $2, updated_at = NOW()
where id = $1
RETURNING id, created_at, updated_at, email, hashed_password, is_admin, is_active, desk_id, full_name
`

type SetUserFullNameByIDParams struct {
	ID       uuid.UUID
	FullName string
}

func (q *Queries) SetUserFullNameByID(ctx context.Context, arg SetUserFullNameByIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, setUserFullNameByID, arg.ID, arg.FullName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsAdmin,
		&i.IsActive,
		&i.DeskID,
		&i.FullName,
	)
	return i, err
}

const setUserInactiveByID = `-- name: SetUserInactiveByID :one
UPDATE users
SET is_active = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, email, hashed_password, is_admin, is_active, desk_id, full_name
`

type SetUserInactiveByIDParams struct {
	ID       uuid.UUID
	IsActive bool
}

func (q *Queries) SetUserInactiveByID(ctx context.Context, arg SetUserInactiveByIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, setUserInactiveByID, arg.ID, arg.IsActive)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsAdmin,
		&i.IsActive,
		&i.DeskID,
		&i.FullName,
	)
	return i, err
}

const setUserIsAdminByID = `-- name: SetUserIsAdminByID :one
UPDATE users
SET is_admin = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, email, hashed_password, is_admin, is_active, desk_id, full_name
`

type SetUserIsAdminByIDParams struct {
	ID      uuid.UUID
	IsAdmin bool
}

func (q *Queries) SetUserIsAdminByID(ctx context.Context, arg SetUserIsAdminByIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, setUserIsAdminByID, arg.ID, arg.IsAdmin)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsAdmin,
		&i.IsActive,
		&i.DeskID,
		&i.FullName,
	)
	return i, err
}
