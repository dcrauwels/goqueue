// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: visitors.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createVisitor = `-- name: CreateVisitor :one
INSERT INTO visitors (id, created_at, updated_at, waiting_since, name, purpose_id, status, daily_ticket_number)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    NOW(),
    $1,
    $2,
    0, --status 
    $3
)
RETURNING id, created_at, updated_at, waiting_since, name, purpose_id, status, daily_ticket_number
`

type CreateVisitorParams struct {
	Name              sql.NullString
	PurposeID         uuid.UUID
	DailyTicketNumber int32
}

func (q *Queries) CreateVisitor(ctx context.Context, arg CreateVisitorParams) (Visitor, error) {
	row := q.db.QueryRowContext(ctx, createVisitor, arg.Name, arg.PurposeID, arg.DailyTicketNumber)
	var i Visitor
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WaitingSince,
		&i.Name,
		&i.PurposeID,
		&i.Status,
		&i.DailyTicketNumber,
	)
	return i, err
}

const getVisitorByID = `-- name: GetVisitorByID :one
SELECT id, created_at, updated_at, waiting_since, name, purpose_id, status, daily_ticket_number FROM visitors
WHERE visitors.id = $1
`

func (q *Queries) GetVisitorByID(ctx context.Context, id uuid.UUID) (Visitor, error) {
	row := q.db.QueryRowContext(ctx, getVisitorByID, id)
	var i Visitor
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WaitingSince,
		&i.Name,
		&i.PurposeID,
		&i.Status,
		&i.DailyTicketNumber,
	)
	return i, err
}

const getVisitors = `-- name: GetVisitors :many
SELECT id, created_at, updated_at, waiting_since, name, purpose_id, status, daily_ticket_number FROM visitors
`

func (q *Queries) GetVisitors(ctx context.Context) ([]Visitor, error) {
	rows, err := q.db.QueryContext(ctx, getVisitors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Visitor
	for rows.Next() {
		var i Visitor
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WaitingSince,
			&i.Name,
			&i.PurposeID,
			&i.Status,
			&i.DailyTicketNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVisitorsByPurpose = `-- name: GetVisitorsByPurpose :many
SELECT id, created_at, updated_at, waiting_since, name, purpose_id, status, daily_ticket_number FROM visitors
WHERE purpose_id = $1
ORDER BY waiting_since ASC
`

func (q *Queries) GetVisitorsByPurpose(ctx context.Context, purposeID uuid.UUID) ([]Visitor, error) {
	rows, err := q.db.QueryContext(ctx, getVisitorsByPurpose, purposeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Visitor
	for rows.Next() {
		var i Visitor
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WaitingSince,
			&i.Name,
			&i.PurposeID,
			&i.Status,
			&i.DailyTicketNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVisitorsByPurposeStatus = `-- name: GetVisitorsByPurposeStatus :many
SELECT id, created_at, updated_at, waiting_since, name, purpose_id, status, daily_ticket_number FROM visitors
WHERE purpose_id = $1 AND status = $2
ORDER BY waiting_since ASC
`

type GetVisitorsByPurposeStatusParams struct {
	PurposeID uuid.UUID
	Status    int32
}

func (q *Queries) GetVisitorsByPurposeStatus(ctx context.Context, arg GetVisitorsByPurposeStatusParams) ([]Visitor, error) {
	rows, err := q.db.QueryContext(ctx, getVisitorsByPurposeStatus, arg.PurposeID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Visitor
	for rows.Next() {
		var i Visitor
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WaitingSince,
			&i.Name,
			&i.PurposeID,
			&i.Status,
			&i.DailyTicketNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVisitorsByStatus = `-- name: GetVisitorsByStatus :many
SELECT id, created_at, updated_at, waiting_since, name, purpose_id, status, daily_ticket_number FROM visitors
WHERE status = $1 -- status
ORDER BY waiting_since ASC
`

func (q *Queries) GetVisitorsByStatus(ctx context.Context, status int32) ([]Visitor, error) {
	rows, err := q.db.QueryContext(ctx, getVisitorsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Visitor
	for rows.Next() {
		var i Visitor
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WaitingSince,
			&i.Name,
			&i.PurposeID,
			&i.Status,
			&i.DailyTicketNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVisitorsForToday = `-- name: GetVisitorsForToday :many
SELECT id, created_at, updated_at, waiting_since, name, purpose_id, status, daily_ticket_number FROM visitors
WHERE waiting_since::date = CURRENT_DATE
ORDER BY waiting_since ASC
`

func (q *Queries) GetVisitorsForToday(ctx context.Context) ([]Visitor, error) {
	rows, err := q.db.QueryContext(ctx, getVisitorsForToday)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Visitor
	for rows.Next() {
		var i Visitor
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WaitingSince,
			&i.Name,
			&i.PurposeID,
			&i.Status,
			&i.DailyTicketNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWaitingVisitorsByPurpose = `-- name: GetWaitingVisitorsByPurpose :many
SELECT id, created_at, updated_at, waiting_since, name, purpose_id, status, daily_ticket_number FROM visitors
WHERE purpose_id = $1 AND status = 1 -- this whole status business is still not implemented correctly
ORDER BY waiting_since ASC
`

func (q *Queries) GetWaitingVisitorsByPurpose(ctx context.Context, purposeID uuid.UUID) ([]Visitor, error) {
	rows, err := q.db.QueryContext(ctx, getWaitingVisitorsByPurpose, purposeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Visitor
	for rows.Next() {
		var i Visitor
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WaitingSince,
			&i.Name,
			&i.PurposeID,
			&i.Status,
			&i.DailyTicketNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setVisitorByID = `-- name: SetVisitorByID :one
UPDATE visitors
SET name = $2, purpose_id = $3, status = $4, updated_at = NOW() -- status 
WHERE id = $1
RETURNING id, created_at, updated_at, waiting_since, name, purpose_id, status, daily_ticket_number
`

type SetVisitorByIDParams struct {
	ID        uuid.UUID
	Name      sql.NullString
	PurposeID uuid.UUID
	Status    int32
}

func (q *Queries) SetVisitorByID(ctx context.Context, arg SetVisitorByIDParams) (Visitor, error) {
	row := q.db.QueryRowContext(ctx, setVisitorByID,
		arg.ID,
		arg.Name,
		arg.PurposeID,
		arg.Status,
	)
	var i Visitor
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WaitingSince,
		&i.Name,
		&i.PurposeID,
		&i.Status,
		&i.DailyTicketNumber,
	)
	return i, err
}

const setVisitorStatusByID = `-- name: SetVisitorStatusByID :one
UPDATE visitors
SET status = $2, updated_at = NOW() --status 
WHERE id = $1
RETURNING id, created_at, updated_at, waiting_since, name, purpose_id, status, daily_ticket_number
`

type SetVisitorStatusByIDParams struct {
	ID     uuid.UUID
	Status int32
}

func (q *Queries) SetVisitorStatusByID(ctx context.Context, arg SetVisitorStatusByIDParams) (Visitor, error) {
	row := q.db.QueryRowContext(ctx, setVisitorStatusByID, arg.ID, arg.Status)
	var i Visitor
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WaitingSince,
		&i.Name,
		&i.PurposeID,
		&i.Status,
		&i.DailyTicketNumber,
	)
	return i, err
}
